<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:base="clr-namespace:HeBianGu.Base.WpfBase;assembly=HeBianGu.Base.WpfBase"
                    xmlns:local="clr-namespace:HeBianGu.ImagePlayer.ImageControl"
                    xmlns:system="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <!--自定义资源引用-->
        <ResourceDictionary Source="/HeBianGu.Base.WpfBase;component/Themes/HeBianGu.Themes.Resource.xaml"/>
        <ResourceDictionary Source="/HeBianGu.Base.WpfBase;component/Themes/Color/LightThemeResource.xaml"/>
        <!--<ResourceDictionary Source="/Ty.Base.WpfBase;component/Themes/Ty.Thremes.Control.xaml"/>-->
    </ResourceDictionary.MergedDictionaries>

    <XmlDataProvider x:Key="Resource.XmlDataProvider.ImageControl" Source="/HeBianGu.Component.ImageControl;component/Resources/ImageConfig.xml"  XPath="root"/>
 
    <ContextMenu x:Key="Resource.ContextMenu.DeleteShape">
        <MenuItem Command="{Binding RelayCommand}" Header="删除" CommandParameter="menu_delete"/>
    </ContextMenu>

    <Style TargetType="{x:Type local:DefectShape}">
        <Setter Property="StrokeThickness" Value="{Binding Source={StaticResource Resource.XmlDataProvider.ImageControl},XPath=DefectRectangle/@StrokeThickness}"/>
        <Setter Property="Stroke" Value="{Binding Source={StaticResource Resource.XmlDataProvider.ImageControl},XPath=DefectRectangle/@Stroke}"/>
        <Setter Property="ContextMenu" Value="{StaticResource Resource.ContextMenu.DeleteShape}"/>
        <Setter Property="Fill">
            <Setter.Value>
                <SolidColorBrush Color="{Binding Source={StaticResource Resource.XmlDataProvider.ImageControl},XPath=DefectRectangle/@Fill}" Opacity="{Binding Source={StaticResource Resource.XmlDataProvider.ImageControl},XPath=DefectRectangle/@Opacity}"/>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type local:DynamicShape}">
        <Setter Property="StrokeDashArray" Value="8,8"/>
        <Setter Property="StrokeDashCap" Value="Triangle"/>
        <Setter Property="Stroke" Value="{Binding Source={StaticResource Resource.XmlDataProvider.ImageControl},XPath=DynamicRectangle/@Stroke}"/>
        <Setter Property="StrokeThickness" Value="{Binding Source={StaticResource Resource.XmlDataProvider.ImageControl},XPath=DynamicRectangle/@StrokeThickness}"/>
        <Setter Property="Fill">
            <Setter.Value>
                <SolidColorBrush Color="{Binding Source={StaticResource Resource.XmlDataProvider.ImageControl},XPath=DynamicRectangle/@Fill}" Opacity="{Binding Source={StaticResource Resource.XmlDataProvider.ImageControl},XPath=DynamicRectangle/@Opacity}"/>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:SampleShape}">
        <Setter Property="StrokeThickness" Value="{Binding Source={StaticResource Resource.XmlDataProvider.ImageControl},XPath=SampleRectangle/@StrokeThickness}"/>
        <Setter Property="Stroke" Value="{Binding Source={StaticResource Resource.XmlDataProvider.ImageControl},XPath=SampleRectangle/@Stroke}"/>
        <Setter Property="ContextMenu" Value="{StaticResource Resource.ContextMenu.DeleteShape}"/>
        <Setter Property="Fill">
            <Setter.Value>
                <SolidColorBrush Color="{Binding Source={StaticResource Resource.XmlDataProvider.ImageControl},XPath=SampleRectangle/@Fill}" Opacity="{Binding Source={StaticResource Resource.XmlDataProvider.ImageControl},XPath=SampleRectangle/@Opacity}"/>
            </Setter.Value>
        </Setter>
        <!--<Setter Property="ToolTip">
            <Setter.Value>
                <ToolTip  DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                    <ToolTip.Background>
                        <SolidColorBrush Color="White" Opacity="0.7"/>
                    </ToolTip.Background>
                    <Grid>
                        <Grid Margin="2"  HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>

                            <TextBlock Text="标定名称："  Grid.Row="0"/>
                            <TextBlock Text="缺陷代码：" Grid.Row="1"/>

                            <TextBlock Grid.Column="1" Grid.Row="0" Text="{Binding Path=Name}"/>
                            <TextBlock Grid.Column="1" Grid.Row="1"  Text="{Binding Path=Code}"/>
                        </Grid>
                    </Grid>
                </ToolTip>
            </Setter.Value>
        </Setter>-->
    </Style>

    <Style x:Key="Resource.Stype.TextBlock.CenterDefault" TargetType="{x:Type TextBlock}">
        <Setter Property="MinWidth" Value="80"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="TextAlignment" Value="Center"/>
    </Style>

    <Style  x:Key="Resource.Stype.ComboBox.CenterDefault" TargetType="{x:Type ComboBox}">
        <Setter Property="Width" Value="100"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <DataTemplate DataType="{x:Type DrawingAttributes}" >
        <Border Width="80" Height="{Binding Path=Height}">
            <Border.Background >
                <SolidColorBrush Color="{Binding Path=Color}"/>
            </Border.Background>
        </Border>
    </DataTemplate>

    <!--矢量图标按钮默认模板-->
    <ControlTemplate x:Key="ControlTemplate.IconButton.Template" TargetType="{x:Type local:IconButton}">
        <Grid >
            <Border x:Name="border" Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Background}" 
                                    Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Height}" Opacity="{TemplateBinding Opacity}"
                                    CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CornerRadius}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                    Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Width}"/>

            <Grid  x:Name="grid">
                <Grid.LayoutTransform>
                    <TransformGroup>
                        <ScaleTransform x:Name="grid_scale" ScaleX="1" ScaleY="1" />
                    </TransformGroup>
                </Grid.LayoutTransform>
                <!--Icon/Text-->
                <StackPanel Orientation="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=Orientation}" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">

                    <TextBlock x:Name="icon"  Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FIconMargin}" 
                           RenderTransformOrigin="0.5,0.5" Style="{StaticResource FIcon}"
                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= FIcon}"
                           FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= FIconSize}" 
                           Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Foreground}" 
                           FontWeight="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= IconFontWeight}" 
                           HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TextBlock.RenderTransform>
                            <RotateTransform x:Name="transIcon" Angle="0"/>
                        </TextBlock.RenderTransform>
                    </TextBlock>

                    <!--<TextBlock VerticalAlignment="Center"  x:Name="txt" 
                           TextDecorations="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ContentDecorations}" 
                                               Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" 
                                               FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FontSize}" 
                                               Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"
                           HorizontalAlignment="Center" />-->
                </StackPanel>
            </Grid>

            <ProgressBar  Background="Transparent"  Opacity="0.5" Visibility="{TemplateBinding base:ControlAttachProperty.IsBuzy,Converter={x:Static base:XConverter.BooleanToVisibilityConverter}}" 
                                     BorderBrush="Transparent"  IsIndeterminate="True"
                                     BorderThickness="0">
                <ProgressBar.Clip>
                    <RectangleGeometry  RadiusX="{TemplateBinding base:ControlAttachProperty.CornerRadius}" RadiusY="{TemplateBinding base:ControlAttachProperty.CornerRadius}">
                        <RectangleGeometry.Rect>
                            <Rect Width="280" Height="52"/>
                        </RectangleGeometry.Rect>
                    </RectangleGeometry>
                </ProgressBar.Clip>
            </ProgressBar>

        </Grid>

        <ControlTemplate.Triggers>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverBackground}" TargetName="border" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}" TargetName="icon"/>

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.5" />

                            <DoubleAnimation Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Duration="0:0:0.2"  Storyboard.TargetName="grid" To="1.2"/>
                            <DoubleAnimation Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Duration="0:0:0.2"  Storyboard.TargetName="grid" To="1.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.5" />

                            <DoubleAnimation Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Duration="0:0:0.2"  Storyboard.TargetName="grid" To="1"/>
                            <DoubleAnimation Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Duration="0:0:0.2"  Storyboard.TargetName="grid" To="1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true"></Condition>
                    <Condition Property="AllowsAnimation" Value="true"></Condition>
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="180" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="0" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="icon"/>
                <!--<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="txt"/>-->

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"  Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"   Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"   Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>


            <Trigger Property="base:ControlAttachProperty.IsBuzy" Value="true">

                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedBackground}" TargetName="border" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="icon"/>
                <!--<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="txt"/>-->

                <!--<Setter Property="Text" Value="{Binding Path=(base:ControlAttachProperty.BuzyText),RelativeSource={RelativeSource TemplatedParent}}" TargetName="txt"/>-->

                <Setter Property="IsEnabled" Value="False"/>

            </Trigger>

            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Background" Value="{DynamicResource S_AccentBrush}" TargetName="border" />
                <Setter Property="Foreground" Value="{DynamicResource S_WhiteNotice}" TargetName="icon"/>
                <Setter Property="Opacity" Value="1"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5" TargetName="border"/>
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedBackground}" TargetName="border" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="icon"/>

            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--矢量图标按钮样式-->
    <Style x:Key="Style.IconButton.Default" TargetType="{x:Type local:IconButton}">
        <Setter Property="Background" Value="{StaticResource S_BlackNotice}" />
        <Setter Property="MouseOverForeground"  Value="{StaticResource S_WhiteNotice}"/>
        <Setter Property="MouseOverBackground"  Value="{StaticResource S_BlackNotice}"/>
        <Setter Property="PressedBackground" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource S_WhiteNotice}" />
        <Setter Property="PressedForeground" Value="{StaticResource S_GrayNotice}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="45" />
        <Setter Property="Height" Value="45" />
        <Setter Property="Opacity" Value="0.4" />
        <Setter Property="FontSize" Value="8" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="FIconSize" Value="20" />
        <Setter Property="Template" Value="{StaticResource ControlTemplate.IconButton.Template}"/>
        <Setter Property="Padding" Value="3,1,3,1" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="FIconMargin" Value="0,0,0,0" />
        <Setter Property="Margin" Value="0,2,0,0" />
        <Setter Property="AllowsAnimation" Value="False" />
        <Setter Property="Orientation" Value="Vertical"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="IconFontWeight" Value="Normal"/>
    </Style>


    <system:Double x:Key="Resource.Button.Width">72</system:Double>
    <system:Double x:Key="Resource.Button.Height">20</system:Double>
    <SolidColorBrush x:Key="Resource.Button.Foreground" Color="White"/>
    <SolidColorBrush x:Key="Resource.Button.PressBackground" Color="#7BA2E7"/>

    <Style x:Key="Style.IconButton.SmallButton" TargetType="{x:Type local:IconButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MouseOverBackground" Value="Transparent" />
        <Setter Property="PressedBackground" Value="{StaticResource Resource.Button.PressBackground}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="MouseOverForeground" Value="{StaticResource Resource.Button.Foreground}" />
        <Setter Property="PressedForeground" Value="{StaticResource Resource.Button.Foreground}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="{StaticResource Resource.Button.Width}" />
        <Setter Property="Height" Value="{StaticResource Resource.Button.Height}" />
        <Setter Property="FontSize" Value="8" />
        <Setter Property="CornerRadius" Value="0" />
        <Setter Property="FIconSize" Value="20" />
        <Setter Property="Template" Value="{StaticResource ControlTemplate.IconButton.Template}"/>
        <Setter Property="Padding" Value="3,1,3,1" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="FIconMargin" Value="0,0,0,0" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="AllowsAnimation" Value="False" />
        <Setter Property="Orientation" Value="Vertical"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="IconFontWeight" Value="Normal"/>
    </Style>

    <!--图片资源的按钮-->
    <Style TargetType="{x:Type local:ImageButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MouseOverBackground" Value="Transparent" />
        <Setter Property="PressedBackground" Value="{StaticResource Resource.Button.PressBackground}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="MouseOverForeground" Value="{StaticResource Resource.Button.Foreground}" />
        <Setter Property="PressedForeground" Value="{StaticResource Resource.Button.Foreground}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="{StaticResource Resource.Button.Width}" />
        <Setter Property="Height" Value="{StaticResource Resource.Button.Height}" />
        <Setter Property="FontSize" Value="8" />
        <Setter Property="CornerRadius" Value="0" />
        <Setter Property="FIconSize" Value="20" />
        <Setter Property="Padding" Value="3,1,3,1" />
        <Setter Property="Content" Value="{x:Null}" /> 
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="AllowsAnimation" Value="False" />
        <Setter Property="Orientation" Value="Vertical"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="IconFontWeight" Value="Normal"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ImageButton}">
                    <Grid >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="border" Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Background}" 
                                    Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Height}" 
                                    CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CornerRadius}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                    Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Width}"/>

                        <Grid  x:Name="grid">
                            <Grid.LayoutTransform>
                                <TransformGroup>
                                    <ScaleTransform x:Name="grid_scale" ScaleX="1" ScaleY="1" />
                                </TransformGroup>
                            </Grid.LayoutTransform>

                            <!--Icon/Text-->
                            <StackPanel Orientation="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=Orientation}" VerticalAlignment="Center" 
                                Margin="{TemplateBinding Padding}" 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">

                                <Image  x:Name="icon" Source="{TemplateBinding ImageSource}" Margin="{TemplateBinding FIconMargin}"/>

                                <TextBlock VerticalAlignment="Center"  x:Name="txt"  
                                           TextDecorations="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ContentDecorations}" 
                                               Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" 
                                               FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FontSize}" 
                                               Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"
                           HorizontalAlignment="Center" />
                            </StackPanel>
                        </Grid>

                        <ProgressBar  Background="Transparent"  Opacity="0.5" Visibility="{TemplateBinding base:ControlAttachProperty.IsBuzy,Converter={x:Static base:XConverter.BooleanToVisibilityConverter}}" 
                                     BorderBrush="Transparent"  IsIndeterminate="True"
                                     BorderThickness="0">
                            <ProgressBar.Clip>
                                <RectangleGeometry  RadiusX="{TemplateBinding base:ControlAttachProperty.CornerRadius}" RadiusY="{TemplateBinding base:ControlAttachProperty.CornerRadius}">
                                    <RectangleGeometry.Rect>
                                        <Rect Width="280" Height="52"/>
                                    </RectangleGeometry.Rect>
                                </RectangleGeometry>
                            </ProgressBar.Clip>
                        </ProgressBar>

                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="0.7" TargetName="icon"/>
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity" To="0.8" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"></Condition>
                                <Condition Property="AllowsAnimation" Value="true"></Condition>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="180" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="0" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>

                        <Trigger Property="IsPressed" Value="True"> 
                            <Setter Property="Opacity" Value="0.5" TargetName="icon"/>
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="txt"/>

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="grid">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"  Storyboard.TargetName="grid">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"   Storyboard.TargetName="grid">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"   Storyboard.TargetName="grid">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="base:ControlAttachProperty.IsBuzy" Value="true">
                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedBackground}" TargetName="border" />
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="txt"/>
                            <Setter Property="Text" Value="{Binding Path=(base:ControlAttachProperty.BuzyText),RelativeSource={RelativeSource TemplatedParent}}" TargetName="txt"/>
                            <Setter Property="IsEnabled" Value="False"/> 
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5" TargetName="border"/>
                            <Setter Property="Opacity" Value="0.5" TargetName="icon"/>
                            <Setter Property="Opacity" Value="0.5" TargetName="txt"/>
                        </Trigger> 
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="txt"/>
                        </Trigger> 
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ImageToolBtn" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Chrome" BorderBrush="Transparent" Background="Transparent" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="#FF288ADD"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>